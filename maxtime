#!/usr/bin/python

import sys
import getopt
import subprocess
from subprocess import call
import re
import matplotlib.pyplot as loopplt

linesize=2000
linescale=linesize/10

def main(filename):
    prevline = 0;
    max = 0;
    i = 0;

    for i in xrange(len(files)):
        filename = files[i]
        with open(filename, "r") as f:
            for line in f:
                words = line.split()
                curline = int(words[1])
                if max < curline - prevline:
                    max = curline - prevline
                    pos = words[0]
                prevline = curline 
        print (pos, max)

def timevsloop(files):
    looppng = "loopplot.png"
    sharepng = "shareplot.png"
    colors = ['red', 'blue']
    offsets = [0.02,0.08]
    maxlist = [0, 0]

    loopplt.figure(1)
    loopplt.xlabel("Loop Number * 2000")
    loopplt.ylabel("Timestamps")
    loopplt.xlim([0, 10])
    loopplt.ylim([0, 1])
    
    loopplt.figure(2)
    loopplt.xlabel("CPU share")
    loopplt.ylabel("Cumulative Distribution")
    loopplt.xlim([0, 1])
    loopplt.ylim([0, 1])
    for i in xrange(len(files)):
        filename = files[i]
        maxdata = 0;
        with open(filename, "r") as f:
            for line in f:
                pass
            words = line.split()
            maxlist[i] = int(words[1]) 
    print maxlist


    for i in xrange(len(files)):
        j = 0;
        color = colors[i]
        filename = files[i]
        offset = offsets[i]
        with open(filename, "r") as f:
            for line in f:
                words = line.split()
                loop = int(words[0])
                timestamp = int(words[1])
                offtime = int(words[2])
                x = loop/float(linescale)
                y = timestamp/float(maxlist[i])
                z = 1 - offtime/float(loop + 1)
                if j == 0:
                    print loop, timestamp, x, y
                loopplt.figure(1)
                loopplt.scatter(x , y - offset , c=color, label=color, alpha=0.5)
                loopplt.figure(2)
                loopplt.scatter(z, x, c=color, label=color, alpha=0.5)
                j = j + 1;
            print (timestamp, maxlist[i], y)
    loopplt.figure(1)
    loopplt.grid(True)
    loopplt.savefig(looppng)
    loopplt.figure(2)
    loopplt.grid(True)
    loopplt.savefig(sharepng)
    loopplt.grid(True)
    loopplt.show()
    

if __name__ == "__main__":
    physfile = sys.argv[1]
    virtfile = sys.argv[2]
    files = [physfile, virtfile]
    main(files)
    timevsloop(files)
